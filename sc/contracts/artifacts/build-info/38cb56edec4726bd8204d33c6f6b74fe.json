{
	"id": "38cb56edec4726bd8204d33c6f6b74fe",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/placePixel.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n/**\n *  @authors: [@shotaronowhere]\n */\n\npragma solidity ^0.7.6;\n\nimport \"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol\";\n\ncontract placePixel {\n\n    event PixelsChange(uint64 _n, bytes _pixels);\n\n    constructor() {\n    }\n\n    function claim(bytes calldata data) external {\n    }\n\n    function changePixels(uint64 _n, bytes calldata _pixels) external{\n        emit PixelsChange(_n, _pixels);\n\n    }\n\n    function lock(bytes8 boundary) external{\n        \n    }\n}\n"
			},
			"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n/**\n *  @authors: [@ferittuncer]\n *  @reviewers: [@hbarcelos]\n *  @auditors: []\n *  @bounties: []\n *  @deployments: []\n */\n\npragma solidity ^0.7.6;\n\n/**\n *  @title IRealitio\n *  @dev Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.\n */\ninterface IRealitio {\n    /// @notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\n    /// @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\n    /// @param question_id The ID of the question\n    /// @param requester The account that requested arbitration\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\n    function notifyOfArbitrationRequest(\n        bytes32 question_id,\n        address requester,\n        uint256 max_previous\n    ) external;\n\n    /// @notice Submit the answer for a question, for use by the arbitrator.\n    /// @dev Doesn't require (or allow) a bond. Required only in v2.0.\n    /// If the current final answer is correct, the account should be whoever submitted it.\n    /// If the current final answer is wrong, the account should be whoever paid for arbitration.\n    /// However, the answerer stipulations are not enforced by the contract.\n    /// @param question_id The ID of the question.\n    /// @param answer The answer, encoded into bytes32.\n    /// @param answerer The account credited with this answer for the purpose of bond claims.\n    function submitAnswerByArbitrator(\n        bytes32 question_id,\n        bytes32 answer,\n        address answerer\n    ) external;\n\n    /// @notice Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct.\n    /// @dev Required only in v2.0.\n    /// @param question_id The ID of the question.\n    /// @dev Updated on each answer, then rewound as each is claimed.\n    function getHistoryHash(bytes32 question_id) external view returns (bytes32);\n\n    /// @notice Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct.\n    /// @dev Required only in v2.0.\n    /// @param commitment_id The ID of the commitment.\n    /// @return Time after which the committed answer can be revealed.\n    /// @return Whether the commitment has already been revealed or not.\n    /// @return The committed answer, encoded as bytes32.\n    function commitments(bytes32 commitment_id)\n        external\n        view\n        returns (\n            uint32,\n            bool,\n            bytes32\n        );\n\n    /// @notice Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\n    /// @dev Doesn't require (or allow) a bond. Required only in v2.1.\n    /// @param question_id The ID of the question\n    /// @param answer The answer, encoded into bytes32\n    /// @param payee_if_wrong The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\n    /// @param last_history_hash The history hash before the final one\n    /// @param last_answer_or_commitment_id The last answer given, or the commitment ID if it was a commitment.\n    /// @param last_answerer The address that supplied the last answer\n    function assignWinnerAndSubmitAnswerByArbitrator(\n        bytes32 question_id,\n        bytes32 answer,\n        address payee_if_wrong,\n        bytes32 last_history_hash,\n        bytes32 last_answer_or_commitment_id,\n        address last_answerer\n    ) external;\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol": {
				"IRealitio": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "answer",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "payee_if_wrong",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "last_history_hash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "last_answer_or_commitment_id",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "last_answerer",
									"type": "address"
								}
							],
							"name": "assignWinnerAndSubmitAnswerByArbitrator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "commitment_id",
									"type": "bytes32"
								}
							],
							"name": "commitments",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								}
							],
							"name": "getHistoryHash",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "requester",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "max_previous",
									"type": "uint256"
								}
							],
							"name": "notifyOfArbitrationRequest",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "answer",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "answerer",
									"type": "address"
								}
							],
							"name": "submitAnswerByArbitrator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.",
						"kind": "dev",
						"methods": {
							"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)": {
								"details": "Doesn't require (or allow) a bond. Required only in v2.1.",
								"params": {
									"answer": "The answer, encoded into bytes32",
									"last_answer_or_commitment_id": "The last answer given, or the commitment ID if it was a commitment.",
									"last_answerer": "The address that supplied the last answer",
									"last_history_hash": "The history hash before the final one",
									"payee_if_wrong": "The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator",
									"question_id": "The ID of the question"
								}
							},
							"commitments(bytes32)": {
								"details": "Required only in v2.0.",
								"params": {
									"commitment_id": "The ID of the commitment."
								},
								"returns": {
									"_0": "Time after which the committed answer can be revealed.",
									"_1": "Whether the commitment has already been revealed or not.",
									"_2": "The committed answer, encoded as bytes32."
								}
							},
							"getHistoryHash(bytes32)": {
								"details": "Required only in v2.0.Updated on each answer, then rewound as each is claimed.",
								"params": {
									"question_id": "The ID of the question."
								}
							},
							"notifyOfArbitrationRequest(bytes32,address,uint256)": {
								"details": "The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.",
								"params": {
									"max_previous": "If specified, reverts if a bond higher than this was submitted after you sent your transaction.",
									"question_id": "The ID of the question",
									"requester": "The account that requested arbitration"
								}
							},
							"submitAnswerByArbitrator(bytes32,bytes32,address)": {
								"details": "Doesn't require (or allow) a bond. Required only in v2.0. If the current final answer is correct, the account should be whoever submitted it. If the current final answer is wrong, the account should be whoever paid for arbitration. However, the answerer stipulations are not enforced by the contract.",
								"params": {
									"answer": "The answer, encoded into bytes32.",
									"answerer": "The account credited with this answer for the purpose of bond claims.",
									"question_id": "The ID of the question."
								}
							}
						},
						"title": "IRealitio",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)": "d44e293c",
							"commitments(bytes32)": "839df945",
							"getHistoryHash(bytes32)": "82ffa9f7",
							"notifyOfArbitrationRequest(bytes32,address,uint256)": "f6a94ecb",
							"submitAnswerByArbitrator(bytes32,bytes32,address)": "fe92049d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"payee_if_wrong\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"last_history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"last_answer_or_commitment_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"last_answerer\",\"type\":\"address\"}],\"name\":\"assignWinnerAndSubmitAnswerByArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment_id\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"}],\"name\":\"getHistoryHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"max_previous\",\"type\":\"uint256\"}],\"name\":\"notifyOfArbitrationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"}],\"name\":\"submitAnswerByArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.\",\"kind\":\"dev\",\"methods\":{\"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)\":{\"details\":\"Doesn't require (or allow) a bond. Required only in v2.1.\",\"params\":{\"answer\":\"The answer, encoded into bytes32\",\"last_answer_or_commitment_id\":\"The last answer given, or the commitment ID if it was a commitment.\",\"last_answerer\":\"The address that supplied the last answer\",\"last_history_hash\":\"The history hash before the final one\",\"payee_if_wrong\":\"The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\",\"question_id\":\"The ID of the question\"}},\"commitments(bytes32)\":{\"details\":\"Required only in v2.0.\",\"params\":{\"commitment_id\":\"The ID of the commitment.\"},\"returns\":{\"_0\":\"Time after which the committed answer can be revealed.\",\"_1\":\"Whether the commitment has already been revealed or not.\",\"_2\":\"The committed answer, encoded as bytes32.\"}},\"getHistoryHash(bytes32)\":{\"details\":\"Required only in v2.0.Updated on each answer, then rewound as each is claimed.\",\"params\":{\"question_id\":\"The ID of the question.\"}},\"notifyOfArbitrationRequest(bytes32,address,uint256)\":{\"details\":\"The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\",\"params\":{\"max_previous\":\"If specified, reverts if a bond higher than this was submitted after you sent your transaction.\",\"question_id\":\"The ID of the question\",\"requester\":\"The account that requested arbitration\"}},\"submitAnswerByArbitrator(bytes32,bytes32,address)\":{\"details\":\"Doesn't require (or allow) a bond. Required only in v2.0. If the current final answer is correct, the account should be whoever submitted it. If the current final answer is wrong, the account should be whoever paid for arbitration. However, the answerer stipulations are not enforced by the contract.\",\"params\":{\"answer\":\"The answer, encoded into bytes32.\",\"answerer\":\"The account credited with this answer for the purpose of bond claims.\",\"question_id\":\"The ID of the question.\"}}},\"title\":\"IRealitio\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)\":{\"notice\":\"Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\"},\"commitments(bytes32)\":{\"notice\":\"Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct.\"},\"getHistoryHash(bytes32)\":{\"notice\":\"Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct.\"},\"notifyOfArbitrationRequest(bytes32,address,uint256)\":{\"notice\":\"Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\"},\"submitAnswerByArbitrator(bytes32,bytes32,address)\":{\"notice\":\"Submit the answer for a question, for use by the arbitrator.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol\":\"IRealitio\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol\":{\"keccak256\":\"0x40520a925e9342f10f31f4c324be4a0da640e09d362166e5d53df1af45716940\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f612effc7a157094eb24f529d510314900f8059a94041f3a1bb033855ddc2454\",\"dweb:/ipfs/QmeMoqcWaNFY29fjciDoGJAhzKo3RfknsRosL9X2hZYTWa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)": {
								"notice": "Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details."
							},
							"commitments(bytes32)": {
								"notice": "Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct."
							},
							"getHistoryHash(bytes32)": {
								"notice": "Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct."
							},
							"notifyOfArbitrationRequest(bytes32,address,uint256)": {
								"notice": "Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision."
							},
							"submitAnswerByArbitrator(bytes32,bytes32,address)": {
								"notice": "Submit the answer for a question, for use by the arbitrator."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/placePixel.sol": {
				"placePixel": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "_n",
									"type": "uint64"
								},
								{
									"indexed": false,
									"internalType": "bytes",
									"name": "_pixels",
									"type": "bytes"
								}
							],
							"name": "PixelsChange",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint64",
									"name": "_n",
									"type": "uint64"
								},
								{
									"internalType": "bytes",
									"name": "_pixels",
									"type": "bytes"
								}
							],
							"name": "changePixels",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "claim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes8",
									"name": "boundary",
									"type": "bytes8"
								}
							],
							"name": "lock",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/placePixel.sol\":175:514  contract placePixel {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/placePixel.sol\":253:274  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/placePixel.sol\":175:514  contract placePixel {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/placePixel.sol\":175:514  contract placePixel {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x08e90893\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xc63ff8dd\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xcdd8e3e5\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/placePixel.sol\":457:512  function lock(bytes8 boundary) external{... */\n    tag_3:\n      tag_6\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_7\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_7:\n      pop\n      calldataload\n      not(sub(shl(0xc0, 0x01), 0x01))\n      and\n      tag_8\n      jump\t// in\n    tag_6:\n      stop\n        /* \"contracts/placePixel.sol\":280:332  function claim(bytes calldata data) external {... */\n    tag_4:\n      tag_6\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      dup2\n      add\n      swap1\n      0x20\n      dup2\n      add\n      dup2\n      calldataload\n      0x0100000000\n      dup2\n      gt\n      iszero\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_11:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x01\n      dup4\n      mul\n      dup5\n      add\n      gt\n      0x0100000000\n      dup4\n      gt\n      or\n      iszero\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_13:\n      pop\n      swap1\n      swap3\n      pop\n      swap1\n      pop\n      tag_14\n      jump\t// in\n        /* \"contracts/placePixel.sol\":338:451  function changePixels(uint64 _n, bytes calldata _pixels) external{... */\n    tag_5:\n      tag_6\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_16:\n      0xffffffffffffffff\n      dup3\n      calldataload\n      and\n      swap2\n      swap1\n      dup2\n      add\n      swap1\n      0x40\n      dup2\n      add\n      0x20\n      dup3\n      add\n      calldataload\n      0x0100000000\n      dup2\n      gt\n      iszero\n      tag_17\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_17:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_18\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_18:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x01\n      dup4\n      mul\n      dup5\n      add\n      gt\n      0x0100000000\n      dup4\n      gt\n      or\n      iszero\n      tag_19\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_19:\n      pop\n      swap1\n      swap3\n      pop\n      swap1\n      pop\n      tag_20\n      jump\t// in\n        /* \"contracts/placePixel.sol\":457:512  function lock(bytes8 boundary) external{... */\n    tag_8:\n      pop\n      jump\t// out\n        /* \"contracts/placePixel.sol\":280:332  function claim(bytes calldata data) external {... */\n    tag_14:\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/placePixel.sol\":338:451  function changePixels(uint64 _n, bytes calldata _pixels) external{... */\n    tag_20:\n        /* \"contracts/placePixel.sol\":418:443  PixelsChange(_n, _pixels) */\n      0x9733cc983acbb5bc34f1beb2f9a6fcf17855246773099d1f1a8fd9a7b69c0312\n        /* \"contracts/placePixel.sol\":431:433  _n */\n      dup4\n        /* \"contracts/placePixel.sol\":435:442  _pixels */\n      dup4\n      dup4\n        /* \"contracts/placePixel.sol\":418:443  PixelsChange(_n, _pixels) */\n      mload(0x40)\n      dup1\n      dup5\n      0xffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup5\n      dup5\n      dup3\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      swap3\n      pop\n      dup1\n      dup3\n      dup5\n      calldatacopy\n      0x00\n      dup4\n      dup3\n      add\n      mstore\n      mload(0x40)\n      0x1f\n      swap1\n      swap2\n      add\n      not(0x1f)\n      and\n      swap1\n      swap3\n      add\n      dup3\n      swap1\n      sub\n      swap7\n      pop\n      swap1\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      log1\n        /* \"contracts/placePixel.sol\":338:451  function changePixels(uint64 _n, bytes calldata _pixels) external{... */\n      pop\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ad4038e1e43e2abec2b44ff2d7bef0d253deb02754008c5c632d35f8a5f4526f64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610214806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806308e9089314610046578063c63ff8dd1461006f578063cdd8e3e5146100df575b600080fd5b61006d6004803603602081101561005c57600080fd5b50356001600160c01b031916610160565b005b61006d6004803603602081101561008557600080fd5b8101906020810181356401000000008111156100a057600080fd5b8201836020820111156100b257600080fd5b803590602001918460018302840111640100000000831117156100d457600080fd5b509092509050610163565b61006d600480360360408110156100f557600080fd5b67ffffffffffffffff823516919081019060408101602082013564010000000081111561012157600080fd5b82018360208201111561013357600080fd5b8035906020019184600183028401116401000000008311171561015557600080fd5b509092509050610167565b50565b5050565b7f9733cc983acbb5bc34f1beb2f9a6fcf17855246773099d1f1a8fd9a7b69c0312838383604051808467ffffffffffffffff168152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a150505056fea2646970667358221220ad4038e1e43e2abec2b44ff2d7bef0d253deb02754008c5c632d35f8a5f4526f64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x214 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E90893 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC63FF8DD EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0xCDD8E3E5 EQ PUSH2 0xDF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH2 0x160 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x163 JUMP JUMPDEST PUSH2 0x6D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x167 JUMP JUMPDEST POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x9733CC983ACBB5BC34F1BEB2F9A6FCF17855246773099D1F1A8FD9A7B69C0312 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP LOG1 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD BLOCKHASH CODESIZE 0xE1 0xE4 RETURNDATACOPY 0x2A 0xBE 0xC2 0xB4 0x4F CALLCODE 0xD7 0xBE CREATE 0xD2 MSTORE8 0xDE 0xB0 0x27 SLOAD STOP DUP13 0x5C PUSH4 0x2D35F8A5 DELEGATECALL MSTORE PUSH16 0x64736F6C634300070600330000000000 ",
							"sourceMap": "175:339:1:-:0;;;253:21;;;;;;;;;;175:339;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100415760003560e01c806308e9089314610046578063c63ff8dd1461006f578063cdd8e3e5146100df575b600080fd5b61006d6004803603602081101561005c57600080fd5b50356001600160c01b031916610160565b005b61006d6004803603602081101561008557600080fd5b8101906020810181356401000000008111156100a057600080fd5b8201836020820111156100b257600080fd5b803590602001918460018302840111640100000000831117156100d457600080fd5b509092509050610163565b61006d600480360360408110156100f557600080fd5b67ffffffffffffffff823516919081019060408101602082013564010000000081111561012157600080fd5b82018360208201111561013357600080fd5b8035906020019184600183028401116401000000008311171561015557600080fd5b509092509050610167565b50565b5050565b7f9733cc983acbb5bc34f1beb2f9a6fcf17855246773099d1f1a8fd9a7b69c0312838383604051808467ffffffffffffffff168152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a150505056fea2646970667358221220ad4038e1e43e2abec2b44ff2d7bef0d253deb02754008c5c632d35f8a5f4526f64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8E90893 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xC63FF8DD EQ PUSH2 0x6F JUMPI DUP1 PUSH4 0xCDD8E3E5 EQ PUSH2 0xDF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xC0 SHL SUB NOT AND PUSH2 0x160 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x85 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 PUSH1 0x20 DUP2 ADD DUP2 CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0xA0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0xB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0xD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x163 JUMP JUMPDEST PUSH2 0x6D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP3 CALLDATALOAD AND SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH1 0x40 DUP2 ADD PUSH1 0x20 DUP3 ADD CALLDATALOAD PUSH5 0x100000000 DUP2 GT ISZERO PUSH2 0x121 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH2 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 0x167 JUMP JUMPDEST POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x9733CC983ACBB5BC34F1BEB2F9A6FCF17855246773099D1F1A8FD9A7B69C0312 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 DUP5 PUSH8 0xFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1F SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND SWAP1 SWAP3 ADD DUP3 SWAP1 SUB SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP LOG1 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAD BLOCKHASH CODESIZE 0xE1 0xE4 RETURNDATACOPY 0x2A 0xBE 0xC2 0xB4 0x4F CALLCODE 0xD7 0xBE CREATE 0xD2 MSTORE8 0xDE 0xB0 0x27 SLOAD STOP DUP13 0x5C PUSH4 0x2D35F8A5 DELEGATECALL MSTORE PUSH16 0x64736F6C634300070600330000000000 ",
							"sourceMap": "175:339:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;457:55;;;;;;;;;;;;;;;;-1:-1:-1;457:55:1;-1:-1:-1;;;;;;457:55:1;;:::i;:::-;;280:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;280:52:1;;-1:-1:-1;280:52:1;-1:-1:-1;280:52:1;:::i;338:113::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;338:113:1;;-1:-1:-1;338:113:1;-1:-1:-1;338:113:1;:::i;457:55::-;;:::o;280:52::-;;;:::o;338:113::-;418:25;431:2;435:7;;418:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;418:25:1;;;;;;;;-1:-1:-1;418:25:1;;-1:-1:-1;;;;;418:25:1;338:113;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "106400",
								"executionCost": "153",
								"totalCost": "106553"
							},
							"external": {
								"changePixels(uint64,bytes)": "infinite",
								"claim(bytes)": "358",
								"lock(bytes8)": "187"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 175,
									"end": 514,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 175,
									"end": 514,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 175,
									"end": 514,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 253,
									"end": 274,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 253,
									"end": 274,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 253,
									"end": 274,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 253,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 253,
									"end": 274,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 253,
									"end": 274,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 274,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 253,
									"end": 274,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 253,
									"end": 274,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 253,
									"end": 274,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 253,
									"end": 274,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 175,
									"end": 514,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 175,
									"end": 514,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 175,
									"end": 514,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 175,
									"end": 514,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 175,
									"end": 514,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 175,
									"end": 514,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 175,
									"end": 514,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ad4038e1e43e2abec2b44ff2d7bef0d253deb02754008c5c632d35f8a5f4526f64736f6c63430007060033",
									".code": [
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "8E90893"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "C63FF8DD"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "CDD8E3E5"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 175,
											"end": 514,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 514,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "100000000"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "100000000"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "100000000"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "tag",
											"source": 1,
											"value": "17"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "100000000"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 457,
											"end": 512,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 457,
											"end": 512,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 280,
											"end": 332,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "PUSH",
											"source": 1,
											"value": "9733CC983ACBB5BC34F1BEB2F9A6FCF17855246773099D1F1A8FD9A7B69C0312"
										},
										{
											"begin": 431,
											"end": 433,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 435,
											"end": 442,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 435,
											"end": 442,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 418,
											"end": 443,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 418,
											"end": 443,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 418,
											"end": 443,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 418,
											"end": 443,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 418,
											"end": 443,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "CALLDATACOPY",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 418,
											"end": 443,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "PUSH",
											"source": 1,
											"value": "1F"
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SWAP7",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "SWAP5",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 418,
											"end": 443,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 338,
											"end": 451,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"changePixels(uint64,bytes)": "cdd8e3e5",
							"claim(bytes)": "c63ff8dd",
							"lock(bytes8)": "08e90893"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_n\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_pixels\",\"type\":\"bytes\"}],\"name\":\"PixelsChange\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_n\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_pixels\",\"type\":\"bytes\"}],\"name\":\"changePixels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8\",\"name\":\"boundary\",\"type\":\"bytes8\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/placePixel.sol\":\"placePixel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol\":{\"keccak256\":\"0x40520a925e9342f10f31f4c324be4a0da640e09d362166e5d53df1af45716940\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f612effc7a157094eb24f529d510314900f8059a94041f3a1bb033855ddc2454\",\"dweb:/ipfs/QmeMoqcWaNFY29fjciDoGJAhzKo3RfknsRosL9X2hZYTWa\"]},\"contracts/placePixel.sol\":{\"keccak256\":\"0xc064635a61ff3d6719e34bea438ca2007f0347cc57bb7e0b5ab8bd01f5913c0c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://627804ab477f25ebb2fc2b44e60265584f3b30542565a0ad586ff8e938440c8b\",\"dweb:/ipfs/QmcTxwZpa29XuwPijZpz6C4oCdSUQQTcHGHYUrMVKSSXqF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol": {
				"ast": {
					"absolutePath": "@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol",
					"exportedSymbols": {
						"IRealitio": [
							59
						]
					},
					"id": 60,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "157:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "182:183:0",
								"text": "  @title IRealitio\n  @dev Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator."
							},
							"fullyImplemented": false,
							"id": 59,
							"linearizedBaseContracts": [
								59
							],
							"name": "IRealitio",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "392:470:0",
										"text": "@notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\n @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\n @param question_id The ID of the question\n @param requester The account that requested arbitration\n @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction."
									},
									"functionSelector": "f6a94ecb",
									"id": 12,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "notifyOfArbitrationRequest",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "question_id",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "912:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "912:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "requester",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "941:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "max_previous",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "968:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "968:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:92:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1003:0:0"
									},
									"scope": 59,
									"src": "867:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 13,
										"nodeType": "StructuredDocumentation",
										"src": "1010:611:0",
										"text": "@notice Submit the answer for a question, for use by the arbitrator.\n @dev Doesn't require (or allow) a bond. Required only in v2.0.\n If the current final answer is correct, the account should be whoever submitted it.\n If the current final answer is wrong, the account should be whoever paid for arbitration.\n However, the answerer stipulations are not enforced by the contract.\n @param question_id The ID of the question.\n @param answer The answer, encoded into bytes32.\n @param answerer The account credited with this answer for the purpose of bond claims."
									},
									"functionSelector": "fe92049d",
									"id": 22,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "submitAnswerByArbitrator",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "question_id",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1669:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 14,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1669:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "answer",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1698:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 16,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "answerer",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1722:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1722:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1659:85:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1753:0:0"
									},
									"scope": 59,
									"src": "1626:128:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "1760:292:0",
										"text": "@notice Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct.\n @dev Required only in v2.0.\n @param question_id The ID of the question.\n @dev Updated on each answer, then rewound as each is claimed."
									},
									"functionSelector": "82ffa9f7",
									"id": 30,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHistoryHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "question_id",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2081:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 24,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2081:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2080:21:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2125:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 27,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2125:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2124:9:0"
									},
									"scope": 59,
									"src": "2057:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "2140:425:0",
										"text": "@notice Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct.\n @dev Required only in v2.0.\n @param commitment_id The ID of the commitment.\n @return Time after which the committed answer can be revealed.\n @return Whether the commitment has already been revealed or not.\n @return The committed answer, encoded as bytes32."
									},
									"functionSelector": "839df945",
									"id": 42,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "commitments",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "commitment_id",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2591:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 32,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2591:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2590:23:0"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2674:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 35,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2674:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2694:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 37,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2694:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2712:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 39,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2660:69:0"
									},
									"scope": 59,
									"src": "2570:160:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2736:718:0",
										"text": "@notice Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\n @dev Doesn't require (or allow) a bond. Required only in v2.1.\n @param question_id The ID of the question\n @param answer The answer, encoded into bytes32\n @param payee_if_wrong The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\n @param last_history_hash The history hash before the final one\n @param last_answer_or_commitment_id The last answer given, or the commitment ID if it was a commitment.\n @param last_answerer The address that supplied the last answer"
									},
									"functionSelector": "d44e293c",
									"id": 58,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "assignWinnerAndSubmitAnswerByArbitrator",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "question_id",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3517:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 44,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3517:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "answer",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3546:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 46,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3546:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "payee_if_wrong",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3570:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "last_history_hash",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3602:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 50,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3602:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "last_answer_or_commitment_id",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3637:36:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 52,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3637:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "last_answerer",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3683:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3683:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3507:203:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3719:0:0"
									},
									"scope": 59,
									"src": "3459:261:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 60,
							"src": "366:3356:0"
						}
					],
					"src": "157:3566:0"
				},
				"id": 0
			},
			"contracts/placePixel.sol": {
				"ast": {
					"absolutePath": "contracts/placePixel.sol",
					"exportedSymbols": {
						"IRealitio": [
							59
						],
						"placePixel": [
							98
						]
					},
					"id": 99,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 61,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "74:23:1"
						},
						{
							"absolutePath": "@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol",
							"file": "@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol",
							"id": 62,
							"nodeType": "ImportDirective",
							"scope": 99,
							"sourceUnit": 60,
							"src": "99:74:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 98,
							"linearizedBaseContracts": [
								98
							],
							"name": "placePixel",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"id": 68,
									"name": "PixelsChange",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"indexed": false,
												"mutability": "mutable",
												"name": "_n",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "221:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 63,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "221:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 66,
												"indexed": false,
												"mutability": "mutable",
												"name": "_pixels",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "232:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 65,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "232:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "220:26:1"
									},
									"src": "202:45:1"
								},
								{
									"body": {
										"id": 71,
										"nodeType": "Block",
										"src": "267:7:1",
										"statements": []
									},
									"id": 72,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "264:2:1"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "267:0:1"
									},
									"scope": 98,
									"src": "253:21:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 77,
										"nodeType": "Block",
										"src": "325:7:1",
										"statements": []
									},
									"functionSelector": "c63ff8dd",
									"id": 78,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claim",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "295:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 73,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "295:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "294:21:1"
									},
									"returnParameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "325:0:1"
									},
									"scope": 98,
									"src": "280:52:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 90,
										"nodeType": "Block",
										"src": "403:48:1",
										"statements": [
											{
												"eventCall": {
													"arguments": [
														{
															"id": 86,
															"name": "_n",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "431:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														{
															"id": 87,
															"name": "_pixels",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 82,
															"src": "435:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"id": 85,
														"name": "PixelsChange",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 68,
														"src": "418:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (uint64,bytes memory)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "418:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 89,
												"nodeType": "EmitStatement",
												"src": "413:30:1"
											}
										]
									},
									"functionSelector": "cdd8e3e5",
									"id": 91,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "changePixels",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "_n",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "360:9:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 79,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "360:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "_pixels",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "371:22:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 81,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "371:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "359:35:1"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "403:0:1"
									},
									"scope": 98,
									"src": "338:113:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "496:16:1",
										"statements": []
									},
									"functionSelector": "08e90893",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "lock",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "boundary",
												"nodeType": "VariableDeclaration",
												"scope": 97,
												"src": "471:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes8",
													"typeString": "bytes8"
												},
												"typeName": {
													"id": 92,
													"name": "bytes8",
													"nodeType": "ElementaryTypeName",
													"src": "471:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes8",
														"typeString": "bytes8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "470:17:1"
									},
									"returnParameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "496:0:1"
									},
									"scope": 98,
									"src": "457:55:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 99,
							"src": "175:339:1"
						}
					],
					"src": "74:441:1"
				},
				"id": 1
			}
		}
	}
}