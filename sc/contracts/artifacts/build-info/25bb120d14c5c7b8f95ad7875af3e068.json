{
	"id": "25bb120d14c5c7b8f95ad7875af3e068",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.7.6",
	"solcLongVersion": "0.7.6+commit.7338295f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/placePixel.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n/**\n *  @authors: [@shotaronowhere]\n */\n\npragma solidity ^0.7.6;\n\nimport \"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol\";\n\ncontract placePixel {\n\n    constructor() {\n    }\n\n    function claim(bytes calldata data) external {\n    }\n\n    function lock(bytes32 boundary) external{\n\n    }\n}\n"
			},
			"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n/**\n *  @authors: [@ferittuncer]\n *  @reviewers: [@hbarcelos]\n *  @auditors: []\n *  @bounties: []\n *  @deployments: []\n */\n\npragma solidity ^0.7.6;\n\n/**\n *  @title IRealitio\n *  @dev Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.\n */\ninterface IRealitio {\n    /// @notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\n    /// @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\n    /// @param question_id The ID of the question\n    /// @param requester The account that requested arbitration\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\n    function notifyOfArbitrationRequest(\n        bytes32 question_id,\n        address requester,\n        uint256 max_previous\n    ) external;\n\n    /// @notice Submit the answer for a question, for use by the arbitrator.\n    /// @dev Doesn't require (or allow) a bond. Required only in v2.0.\n    /// If the current final answer is correct, the account should be whoever submitted it.\n    /// If the current final answer is wrong, the account should be whoever paid for arbitration.\n    /// However, the answerer stipulations are not enforced by the contract.\n    /// @param question_id The ID of the question.\n    /// @param answer The answer, encoded into bytes32.\n    /// @param answerer The account credited with this answer for the purpose of bond claims.\n    function submitAnswerByArbitrator(\n        bytes32 question_id,\n        bytes32 answer,\n        address answerer\n    ) external;\n\n    /// @notice Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct.\n    /// @dev Required only in v2.0.\n    /// @param question_id The ID of the question.\n    /// @dev Updated on each answer, then rewound as each is claimed.\n    function getHistoryHash(bytes32 question_id) external view returns (bytes32);\n\n    /// @notice Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct.\n    /// @dev Required only in v2.0.\n    /// @param commitment_id The ID of the commitment.\n    /// @return Time after which the committed answer can be revealed.\n    /// @return Whether the commitment has already been revealed or not.\n    /// @return The committed answer, encoded as bytes32.\n    function commitments(bytes32 commitment_id)\n        external\n        view\n        returns (\n            uint32,\n            bool,\n            bytes32\n        );\n\n    /// @notice Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\n    /// @dev Doesn't require (or allow) a bond. Required only in v2.1.\n    /// @param question_id The ID of the question\n    /// @param answer The answer, encoded into bytes32\n    /// @param payee_if_wrong The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\n    /// @param last_history_hash The history hash before the final one\n    /// @param last_answer_or_commitment_id The last answer given, or the commitment ID if it was a commitment.\n    /// @param last_answerer The address that supplied the last answer\n    function assignWinnerAndSubmitAnswerByArbitrator(\n        bytes32 question_id,\n        bytes32 answer,\n        address payee_if_wrong,\n        bytes32 last_history_hash,\n        bytes32 last_answer_or_commitment_id,\n        address last_answerer\n    ) external;\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol": {
				"IRealitio": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "answer",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "payee_if_wrong",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "last_history_hash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "last_answer_or_commitment_id",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "last_answerer",
									"type": "address"
								}
							],
							"name": "assignWinnerAndSubmitAnswerByArbitrator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "commitment_id",
									"type": "bytes32"
								}
							],
							"name": "commitments",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								}
							],
							"name": "getHistoryHash",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "requester",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "max_previous",
									"type": "uint256"
								}
							],
							"name": "notifyOfArbitrationRequest",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "answer",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "answerer",
									"type": "address"
								}
							],
							"name": "submitAnswerByArbitrator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.",
						"kind": "dev",
						"methods": {
							"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)": {
								"details": "Doesn't require (or allow) a bond. Required only in v2.1.",
								"params": {
									"answer": "The answer, encoded into bytes32",
									"last_answer_or_commitment_id": "The last answer given, or the commitment ID if it was a commitment.",
									"last_answerer": "The address that supplied the last answer",
									"last_history_hash": "The history hash before the final one",
									"payee_if_wrong": "The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator",
									"question_id": "The ID of the question"
								}
							},
							"commitments(bytes32)": {
								"details": "Required only in v2.0.",
								"params": {
									"commitment_id": "The ID of the commitment."
								},
								"returns": {
									"_0": "Time after which the committed answer can be revealed.",
									"_1": "Whether the commitment has already been revealed or not.",
									"_2": "The committed answer, encoded as bytes32."
								}
							},
							"getHistoryHash(bytes32)": {
								"details": "Required only in v2.0.Updated on each answer, then rewound as each is claimed.",
								"params": {
									"question_id": "The ID of the question."
								}
							},
							"notifyOfArbitrationRequest(bytes32,address,uint256)": {
								"details": "The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.",
								"params": {
									"max_previous": "If specified, reverts if a bond higher than this was submitted after you sent your transaction.",
									"question_id": "The ID of the question",
									"requester": "The account that requested arbitration"
								}
							},
							"submitAnswerByArbitrator(bytes32,bytes32,address)": {
								"details": "Doesn't require (or allow) a bond. Required only in v2.0. If the current final answer is correct, the account should be whoever submitted it. If the current final answer is wrong, the account should be whoever paid for arbitration. However, the answerer stipulations are not enforced by the contract.",
								"params": {
									"answer": "The answer, encoded into bytes32.",
									"answerer": "The account credited with this answer for the purpose of bond claims.",
									"question_id": "The ID of the question."
								}
							}
						},
						"title": "IRealitio",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)": "d44e293c",
							"commitments(bytes32)": "839df945",
							"getHistoryHash(bytes32)": "82ffa9f7",
							"notifyOfArbitrationRequest(bytes32,address,uint256)": "f6a94ecb",
							"submitAnswerByArbitrator(bytes32,bytes32,address)": "fe92049d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"payee_if_wrong\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"last_history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"last_answer_or_commitment_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"last_answerer\",\"type\":\"address\"}],\"name\":\"assignWinnerAndSubmitAnswerByArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment_id\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"}],\"name\":\"getHistoryHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"max_previous\",\"type\":\"uint256\"}],\"name\":\"notifyOfArbitrationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"}],\"name\":\"submitAnswerByArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.\",\"kind\":\"dev\",\"methods\":{\"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)\":{\"details\":\"Doesn't require (or allow) a bond. Required only in v2.1.\",\"params\":{\"answer\":\"The answer, encoded into bytes32\",\"last_answer_or_commitment_id\":\"The last answer given, or the commitment ID if it was a commitment.\",\"last_answerer\":\"The address that supplied the last answer\",\"last_history_hash\":\"The history hash before the final one\",\"payee_if_wrong\":\"The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\",\"question_id\":\"The ID of the question\"}},\"commitments(bytes32)\":{\"details\":\"Required only in v2.0.\",\"params\":{\"commitment_id\":\"The ID of the commitment.\"},\"returns\":{\"_0\":\"Time after which the committed answer can be revealed.\",\"_1\":\"Whether the commitment has already been revealed or not.\",\"_2\":\"The committed answer, encoded as bytes32.\"}},\"getHistoryHash(bytes32)\":{\"details\":\"Required only in v2.0.Updated on each answer, then rewound as each is claimed.\",\"params\":{\"question_id\":\"The ID of the question.\"}},\"notifyOfArbitrationRequest(bytes32,address,uint256)\":{\"details\":\"The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\",\"params\":{\"max_previous\":\"If specified, reverts if a bond higher than this was submitted after you sent your transaction.\",\"question_id\":\"The ID of the question\",\"requester\":\"The account that requested arbitration\"}},\"submitAnswerByArbitrator(bytes32,bytes32,address)\":{\"details\":\"Doesn't require (or allow) a bond. Required only in v2.0. If the current final answer is correct, the account should be whoever submitted it. If the current final answer is wrong, the account should be whoever paid for arbitration. However, the answerer stipulations are not enforced by the contract.\",\"params\":{\"answer\":\"The answer, encoded into bytes32.\",\"answerer\":\"The account credited with this answer for the purpose of bond claims.\",\"question_id\":\"The ID of the question.\"}}},\"title\":\"IRealitio\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)\":{\"notice\":\"Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\"},\"commitments(bytes32)\":{\"notice\":\"Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct.\"},\"getHistoryHash(bytes32)\":{\"notice\":\"Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct.\"},\"notifyOfArbitrationRequest(bytes32,address,uint256)\":{\"notice\":\"Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\"},\"submitAnswerByArbitrator(bytes32,bytes32,address)\":{\"notice\":\"Submit the answer for a question, for use by the arbitrator.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol\":\"IRealitio\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol\":{\"keccak256\":\"0x40520a925e9342f10f31f4c324be4a0da640e09d362166e5d53df1af45716940\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f612effc7a157094eb24f529d510314900f8059a94041f3a1bb033855ddc2454\",\"dweb:/ipfs/QmeMoqcWaNFY29fjciDoGJAhzKo3RfknsRosL9X2hZYTWa\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)": {
								"notice": "Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details."
							},
							"commitments(bytes32)": {
								"notice": "Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct."
							},
							"getHistoryHash(bytes32)": {
								"notice": "Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct."
							},
							"notifyOfArbitrationRequest(bytes32,address,uint256)": {
								"notice": "Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision."
							},
							"submitAnswerByArbitrator(bytes32,bytes32,address)": {
								"notice": "Submit the answer for a question, for use by the arbitrator."
							}
						},
						"version": 1
					}
				}
			},
			"contracts/placePixel.sol": {
				"placePixel": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "claim",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "boundary",
									"type": "bytes32"
								}
							],
							"name": "lock",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/placePixel.sol\":175:337  contract placePixel {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/placePixel.sol\":202:223  constructor() {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/placePixel.sol\":175:337  contract placePixel {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/placePixel.sol\":175:337  contract placePixel {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x01670ba9\n      eq\n      tag_3\n      jumpi\n      dup1\n      0xc63ff8dd\n      eq\n      tag_4\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/placePixel.sol\":287:335  function lock(bytes32 boundary) external{... */\n    tag_3:\n      tag_5\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_6\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_6:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      swap3\n      swap2\n      swap1\n      pop\n      pop\n      pop\n      tag_7\n      jump\t// in\n    tag_5:\n      stop\n        /* \"contracts/placePixel.sol\":229:281  function claim(bytes calldata data) external {... */\n    tag_4:\n      tag_8\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_9:\n      dup2\n      add\n      swap1\n      dup1\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap1\n      0x0100000000\n      dup2\n      gt\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      dup3\n      add\n      dup4\n      0x20\n      dup3\n      add\n      gt\n      iszero\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_11:\n      dup1\n      calldataload\n      swap1\n      0x20\n      add\n      swap2\n      dup5\n      0x01\n      dup4\n      mul\n      dup5\n      add\n      gt\n      0x0100000000\n      dup4\n      gt\n      or\n      iszero\n      tag_12\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_12:\n      swap1\n      swap2\n      swap3\n      swap4\n      swap2\n      swap3\n      swap4\n      swap1\n      pop\n      pop\n      pop\n      tag_13\n      jump\t// in\n    tag_8:\n      stop\n        /* \"contracts/placePixel.sol\":287:335  function lock(bytes32 boundary) external{... */\n    tag_7:\n      pop\n      jump\t// out\n        /* \"contracts/placePixel.sol\":229:281  function claim(bytes calldata data) external {... */\n    tag_13:\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220751874f4ddf5db95f52982a427bd639d39ab63e9ac4ed3e1b335ce2db714798c64736f6c63430007060033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610112806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806301670ba9146037578063c63ff8dd146062575b600080fd5b606060048036036020811015604b57600080fd5b810190808035906020019092919050505060d5565b005b60d360048036036020811015607657600080fd5b8101908080359060200190640100000000811115609257600080fd5b82018360208201111560a357600080fd5b8035906020019184600183028401116401000000008311171560c457600080fd5b909192939192939050505060d8565b005b50565b505056fea2646970667358221220751874f4ddf5db95f52982a427bd639d39ab63e9ac4ed3e1b335ce2db714798c64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x112 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1670BA9 EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0xC63FF8DD EQ PUSH1 0x62 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0xD5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH1 0x92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH1 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH1 0xC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH1 0xD8 JUMP JUMPDEST STOP JUMPDEST POP JUMP JUMPDEST POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0x1874F4DDF5DB95F52982A427BD639D39AB63E9AC4ED3 0xE1 0xB3 CALLDATALOAD 0xCE 0x2D 0xB7 EQ PUSH26 0x8C64736F6C634300070600330000000000000000000000000000 ",
							"sourceMap": "175:162:1:-:0;;;202:21;;;;;;;;;;175:162;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060325760003560e01c806301670ba9146037578063c63ff8dd146062575b600080fd5b606060048036036020811015604b57600080fd5b810190808035906020019092919050505060d5565b005b60d360048036036020811015607657600080fd5b8101908080359060200190640100000000811115609257600080fd5b82018360208201111560a357600080fd5b8035906020019184600183028401116401000000008311171560c457600080fd5b909192939192939050505060d8565b005b50565b505056fea2646970667358221220751874f4ddf5db95f52982a427bd639d39ab63e9ac4ed3e1b335ce2db714798c64736f6c63430007060033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x32 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1670BA9 EQ PUSH1 0x37 JUMPI DUP1 PUSH4 0xC63FF8DD EQ PUSH1 0x62 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x4B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0xD5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xD3 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH5 0x100000000 DUP2 GT ISZERO PUSH1 0x92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 0x20 DUP3 ADD GT ISZERO PUSH1 0xA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 0x20 ADD SWAP2 DUP5 PUSH1 0x1 DUP4 MUL DUP5 ADD GT PUSH5 0x100000000 DUP4 GT OR ISZERO PUSH1 0xC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH1 0xD8 JUMP JUMPDEST STOP JUMPDEST POP JUMP JUMPDEST POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0x1874F4DDF5DB95F52982A427BD639D39AB63E9AC4ED3 0xE1 0xB3 CALLDATALOAD 0xCE 0x2D 0xB7 EQ PUSH26 0x8C64736F6C634300070600330000000000000000000000000000 ",
							"sourceMap": "175:162:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;287:48;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;229:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;287:48;;:::o;229:52::-;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "54800",
								"executionCost": "105",
								"totalCost": "54905"
							},
							"external": {
								"claim(bytes)": "379",
								"lock(bytes32)": "206"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 175,
									"end": 337,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 175,
									"end": 337,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 175,
									"end": 337,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 202,
									"end": 223,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 202,
									"end": 223,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 202,
									"end": 223,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 202,
									"end": 223,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 223,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 202,
									"end": 223,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 223,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 202,
									"end": 223,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 202,
									"end": 223,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 223,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 202,
									"end": 223,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 175,
									"end": 337,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 175,
									"end": 337,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 175,
									"end": 337,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 175,
									"end": 337,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 175,
									"end": 337,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 175,
									"end": 337,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 175,
									"end": 337,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220751874f4ddf5db95f52982a427bd639d39ab63e9ac4ed3e1b335ce2db714798c64736f6c63430007060033",
									".code": [
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH",
											"source": 1,
											"value": "1670BA9"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH",
											"source": 1,
											"value": "C63FF8DD"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 175,
											"end": 337,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 175,
											"end": 337,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "tag",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "tag",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "100000000"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "100000000"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 287,
											"end": 335,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 287,
											"end": 335,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"claim(bytes)": "c63ff8dd",
							"lock(bytes32)": "01670ba9"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"boundary\",\"type\":\"bytes32\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/placePixel.sol\":\"placePixel\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol\":{\"keccak256\":\"0x40520a925e9342f10f31f4c324be4a0da640e09d362166e5d53df1af45716940\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f612effc7a157094eb24f529d510314900f8059a94041f3a1bb033855ddc2454\",\"dweb:/ipfs/QmeMoqcWaNFY29fjciDoGJAhzKo3RfknsRosL9X2hZYTWa\"]},\"contracts/placePixel.sol\":{\"keccak256\":\"0x1f0be2dde99ec5ea726586ceacea4ef138b6fbb4c99458f7e51b4c3a10d9b011\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c3f55c575e5e8c00fb5e2154d82bff1cc7223566847285f3b2999820017b53df\",\"dweb:/ipfs/QmWrhu7xEhTgm6dg3JXQtBa3yMgPkQCwfVnumXk6npmT6n\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol": {
				"ast": {
					"absolutePath": "@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol",
					"exportedSymbols": {
						"IRealitio": [
							59
						]
					},
					"id": 60,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "157:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "182:183:0",
								"text": "  @title IRealitio\n  @dev Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator."
							},
							"fullyImplemented": false,
							"id": 59,
							"linearizedBaseContracts": [
								59
							],
							"name": "IRealitio",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "392:470:0",
										"text": "@notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\n @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\n @param question_id The ID of the question\n @param requester The account that requested arbitration\n @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction."
									},
									"functionSelector": "f6a94ecb",
									"id": 12,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "notifyOfArbitrationRequest",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "question_id",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "912:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "912:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "requester",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "941:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "max_previous",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "968:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "968:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:92:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1003:0:0"
									},
									"scope": 59,
									"src": "867:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 13,
										"nodeType": "StructuredDocumentation",
										"src": "1010:611:0",
										"text": "@notice Submit the answer for a question, for use by the arbitrator.\n @dev Doesn't require (or allow) a bond. Required only in v2.0.\n If the current final answer is correct, the account should be whoever submitted it.\n If the current final answer is wrong, the account should be whoever paid for arbitration.\n However, the answerer stipulations are not enforced by the contract.\n @param question_id The ID of the question.\n @param answer The answer, encoded into bytes32.\n @param answerer The account credited with this answer for the purpose of bond claims."
									},
									"functionSelector": "fe92049d",
									"id": 22,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "submitAnswerByArbitrator",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "question_id",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1669:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 14,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1669:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "answer",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1698:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 16,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "answerer",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1722:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1722:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1659:85:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1753:0:0"
									},
									"scope": 59,
									"src": "1626:128:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "1760:292:0",
										"text": "@notice Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct.\n @dev Required only in v2.0.\n @param question_id The ID of the question.\n @dev Updated on each answer, then rewound as each is claimed."
									},
									"functionSelector": "82ffa9f7",
									"id": 30,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHistoryHash",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "question_id",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2081:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 24,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2081:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2080:21:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2125:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 27,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2125:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2124:9:0"
									},
									"scope": 59,
									"src": "2057:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "2140:425:0",
										"text": "@notice Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct.\n @dev Required only in v2.0.\n @param commitment_id The ID of the commitment.\n @return Time after which the committed answer can be revealed.\n @return Whether the commitment has already been revealed or not.\n @return The committed answer, encoded as bytes32."
									},
									"functionSelector": "839df945",
									"id": 42,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "commitments",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "commitment_id",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2591:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 32,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2591:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2590:23:0"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2674:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 35,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2674:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2694:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 37,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2694:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2712:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 39,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2660:69:0"
									},
									"scope": 59,
									"src": "2570:160:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2736:718:0",
										"text": "@notice Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\n @dev Doesn't require (or allow) a bond. Required only in v2.1.\n @param question_id The ID of the question\n @param answer The answer, encoded into bytes32\n @param payee_if_wrong The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\n @param last_history_hash The history hash before the final one\n @param last_answer_or_commitment_id The last answer given, or the commitment ID if it was a commitment.\n @param last_answerer The address that supplied the last answer"
									},
									"functionSelector": "d44e293c",
									"id": 58,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "assignWinnerAndSubmitAnswerByArbitrator",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "question_id",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3517:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 44,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3517:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "answer",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3546:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 46,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3546:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "payee_if_wrong",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3570:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "last_history_hash",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3602:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 50,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3602:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "last_answer_or_commitment_id",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3637:36:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 52,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3637:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "last_answerer",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3683:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3683:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3507:203:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3719:0:0"
									},
									"scope": 59,
									"src": "3459:261:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 60,
							"src": "366:3356:0"
						}
					],
					"src": "157:3566:0"
				},
				"id": 0
			},
			"contracts/placePixel.sol": {
				"ast": {
					"absolutePath": "contracts/placePixel.sol",
					"exportedSymbols": {
						"IRealitio": [
							59
						],
						"placePixel": [
							79
						]
					},
					"id": 80,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 61,
							"literals": [
								"solidity",
								"^",
								"0.7",
								".6"
							],
							"nodeType": "PragmaDirective",
							"src": "74:23:1"
						},
						{
							"absolutePath": "@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol",
							"file": "@kleros/realitio-arbitrator-with-appeals/contracts/IRealitio.sol",
							"id": 62,
							"nodeType": "ImportDirective",
							"scope": 80,
							"sourceUnit": 60,
							"src": "99:74:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 79,
							"linearizedBaseContracts": [
								79
							],
							"name": "placePixel",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 65,
										"nodeType": "Block",
										"src": "216:7:1",
										"statements": []
									},
									"id": 66,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "213:2:1"
									},
									"returnParameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "216:0:1"
									},
									"scope": 79,
									"src": "202:21:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 71,
										"nodeType": "Block",
										"src": "274:7:1",
										"statements": []
									},
									"functionSelector": "c63ff8dd",
									"id": 72,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claim",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 68,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "244:19:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 67,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "244:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "243:21:1"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "274:0:1"
									},
									"scope": 79,
									"src": "229:52:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 77,
										"nodeType": "Block",
										"src": "327:8:1",
										"statements": []
									},
									"functionSelector": "01670ba9",
									"id": 78,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "lock",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 75,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 74,
												"mutability": "mutable",
												"name": "boundary",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "301:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 73,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "301:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "300:18:1"
									},
									"returnParameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "327:0:1"
									},
									"scope": 79,
									"src": "287:48:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 80,
							"src": "175:162:1"
						}
					],
					"src": "74:264:1"
				},
				"id": 1
			}
		}
	}
}