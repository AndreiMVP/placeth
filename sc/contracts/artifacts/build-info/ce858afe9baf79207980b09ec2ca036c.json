{
	"id": "ce858afe9baf79207980b09ec2ca036c",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/IRealitio.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\n/**\n *  @authors: [@ferittuncer]\n *  @reviewers: [@hbarcelos]\n *  @auditors: []\n *  @bounties: []\n *  @deployments: []\n */\n\npragma solidity ^0.8.0;\n\n/**\n *  @title IRealitio\n *  @dev Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.\n */\ninterface IRealitio {\n    /// @notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\n    /// @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\n    /// @param question_id The ID of the question\n    /// @param requester The account that requested arbitration\n    /// @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction.\n    function notifyOfArbitrationRequest(\n        bytes32 question_id,\n        address requester,\n        uint256 max_previous\n    ) external;\n\n    /// @notice Submit the answer for a question, for use by the arbitrator.\n    /// @dev Doesn't require (or allow) a bond. Required only in v2.0.\n    /// If the current final answer is correct, the account should be whoever submitted it.\n    /// If the current final answer is wrong, the account should be whoever paid for arbitration.\n    /// However, the answerer stipulations are not enforced by the contract.\n    /// @param question_id The ID of the question.\n    /// @param answer The answer, encoded into bytes32.\n    /// @param answerer The account credited with this answer for the purpose of bond claims.\n    function submitAnswerByArbitrator(\n        bytes32 question_id,\n        bytes32 answer,\n        address answerer\n    ) external;\n\n    /// @notice Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct.\n    /// @dev Required only in v2.0.\n    /// @param question_id The ID of the question.\n    /// @dev Updated on each answer, then rewound as each is claimed.\n    function getHistoryHash(bytes32 question_id) external view returns (bytes32);\n\n    /// @notice Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct.\n    /// @dev Required only in v2.0.\n    /// @param commitment_id The ID of the commitment.\n    /// @return Time after which the committed answer can be revealed.\n    /// @return Whether the commitment has already been revealed or not.\n    /// @return The committed answer, encoded as bytes32.\n    function commitments(bytes32 commitment_id)\n        external\n        view\n        returns (\n            uint32,\n            bool,\n            bytes32\n        );\n\n    /// @notice Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\n    /// @dev Doesn't require (or allow) a bond. Required only in v2.1.\n    /// @param question_id The ID of the question\n    /// @param answer The answer, encoded into bytes32\n    /// @param payee_if_wrong The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\n    /// @param last_history_hash The history hash before the final one\n    /// @param last_answer_or_commitment_id The last answer given, or the commitment ID if it was a commitment.\n    /// @param last_answerer The address that supplied the last answer\n    function assignWinnerAndSubmitAnswerByArbitrator(\n        bytes32 question_id,\n        bytes32 answer,\n        address payee_if_wrong,\n        bytes32 last_history_hash,\n        bytes32 last_answer_or_commitment_id,\n        address last_answerer\n    ) external;\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/IRealitio.sol": {
				"IRealitio": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "answer",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "payee_if_wrong",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "last_history_hash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "last_answer_or_commitment_id",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "last_answerer",
									"type": "address"
								}
							],
							"name": "assignWinnerAndSubmitAnswerByArbitrator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "commitment_id",
									"type": "bytes32"
								}
							],
							"name": "commitments",
							"outputs": [
								{
									"internalType": "uint32",
									"name": "",
									"type": "uint32"
								},
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								},
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								}
							],
							"name": "getHistoryHash",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "requester",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "max_previous",
									"type": "uint256"
								}
							],
							"name": "notifyOfArbitrationRequest",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "question_id",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "answer",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "answerer",
									"type": "address"
								}
							],
							"name": "submitAnswerByArbitrator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.",
						"kind": "dev",
						"methods": {
							"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)": {
								"details": "Doesn't require (or allow) a bond. Required only in v2.1.",
								"params": {
									"answer": "The answer, encoded into bytes32",
									"last_answer_or_commitment_id": "The last answer given, or the commitment ID if it was a commitment.",
									"last_answerer": "The address that supplied the last answer",
									"last_history_hash": "The history hash before the final one",
									"payee_if_wrong": "The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator",
									"question_id": "The ID of the question"
								}
							},
							"commitments(bytes32)": {
								"details": "Required only in v2.0.",
								"params": {
									"commitment_id": "The ID of the commitment."
								},
								"returns": {
									"_0": "Time after which the committed answer can be revealed.",
									"_1": "Whether the commitment has already been revealed or not.",
									"_2": "The committed answer, encoded as bytes32."
								}
							},
							"getHistoryHash(bytes32)": {
								"details": "Required only in v2.0.Updated on each answer, then rewound as each is claimed.",
								"params": {
									"question_id": "The ID of the question."
								}
							},
							"notifyOfArbitrationRequest(bytes32,address,uint256)": {
								"details": "The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.",
								"params": {
									"max_previous": "If specified, reverts if a bond higher than this was submitted after you sent your transaction.",
									"question_id": "The ID of the question",
									"requester": "The account that requested arbitration"
								}
							},
							"submitAnswerByArbitrator(bytes32,bytes32,address)": {
								"details": "Doesn't require (or allow) a bond. Required only in v2.0. If the current final answer is correct, the account should be whoever submitted it. If the current final answer is wrong, the account should be whoever paid for arbitration. However, the answerer stipulations are not enforced by the contract.",
								"params": {
									"answer": "The answer, encoded into bytes32.",
									"answerer": "The account credited with this answer for the purpose of bond claims.",
									"question_id": "The ID of the question."
								}
							}
						},
						"title": "IRealitio",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)": "d44e293c",
							"commitments(bytes32)": "839df945",
							"getHistoryHash(bytes32)": "82ffa9f7",
							"notifyOfArbitrationRequest(bytes32,address,uint256)": "f6a94ecb",
							"submitAnswerByArbitrator(bytes32,bytes32,address)": "fe92049d"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"payee_if_wrong\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"last_history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"last_answer_or_commitment_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"last_answerer\",\"type\":\"address\"}],\"name\":\"assignWinnerAndSubmitAnswerByArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment_id\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"}],\"name\":\"getHistoryHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"max_previous\",\"type\":\"uint256\"}],\"name\":\"notifyOfArbitrationRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"question_id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"answer\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"answerer\",\"type\":\"address\"}],\"name\":\"submitAnswerByArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator.\",\"kind\":\"dev\",\"methods\":{\"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)\":{\"details\":\"Doesn't require (or allow) a bond. Required only in v2.1.\",\"params\":{\"answer\":\"The answer, encoded into bytes32\",\"last_answer_or_commitment_id\":\"The last answer given, or the commitment ID if it was a commitment.\",\"last_answerer\":\"The address that supplied the last answer\",\"last_history_hash\":\"The history hash before the final one\",\"payee_if_wrong\":\"The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\",\"question_id\":\"The ID of the question\"}},\"commitments(bytes32)\":{\"details\":\"Required only in v2.0.\",\"params\":{\"commitment_id\":\"The ID of the commitment.\"},\"returns\":{\"_0\":\"Time after which the committed answer can be revealed.\",\"_1\":\"Whether the commitment has already been revealed or not.\",\"_2\":\"The committed answer, encoded as bytes32.\"}},\"getHistoryHash(bytes32)\":{\"details\":\"Required only in v2.0.Updated on each answer, then rewound as each is claimed.\",\"params\":{\"question_id\":\"The ID of the question.\"}},\"notifyOfArbitrationRequest(bytes32,address,uint256)\":{\"details\":\"The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\",\"params\":{\"max_previous\":\"If specified, reverts if a bond higher than this was submitted after you sent your transaction.\",\"question_id\":\"The ID of the question\",\"requester\":\"The account that requested arbitration\"}},\"submitAnswerByArbitrator(bytes32,bytes32,address)\":{\"details\":\"Doesn't require (or allow) a bond. Required only in v2.0. If the current final answer is correct, the account should be whoever submitted it. If the current final answer is wrong, the account should be whoever paid for arbitration. However, the answerer stipulations are not enforced by the contract.\",\"params\":{\"answer\":\"The answer, encoded into bytes32.\",\"answerer\":\"The account credited with this answer for the purpose of bond claims.\",\"question_id\":\"The ID of the question.\"}}},\"title\":\"IRealitio\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)\":{\"notice\":\"Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\"},\"commitments(bytes32)\":{\"notice\":\"Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct.\"},\"getHistoryHash(bytes32)\":{\"notice\":\"Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct.\"},\"notifyOfArbitrationRequest(bytes32,address,uint256)\":{\"notice\":\"Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\"},\"submitAnswerByArbitrator(bytes32,bytes32,address)\":{\"notice\":\"Submit the answer for a question, for use by the arbitrator.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IRealitio.sol\":\"IRealitio\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IRealitio.sol\":{\"keccak256\":\"0x3c6ca2379680a5cb9dcd948bfa75fd9eac17351acac281520b4682ae4ffc1db8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ac177bee407bcc3ca0b544d10f00cd6ee648ba8e2f290ced1c172029e23eee2\",\"dweb:/ipfs/QmYNxc2TiE9rdGmXw7FGGdETLvEsWQrC8kmFURmCKzJbzA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"assignWinnerAndSubmitAnswerByArbitrator(bytes32,bytes32,address,bytes32,bytes32,address)": {
								"notice": "Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details."
							},
							"commitments(bytes32)": {
								"notice": "Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct."
							},
							"getHistoryHash(bytes32)": {
								"notice": "Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct."
							},
							"notifyOfArbitrationRequest(bytes32,address,uint256)": {
								"notice": "Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision."
							},
							"submitAnswerByArbitrator(bytes32,bytes32,address)": {
								"notice": "Submit the answer for a question, for use by the arbitrator."
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/IRealitio.sol": {
				"ast": {
					"absolutePath": "contracts/IRealitio.sol",
					"exportedSymbols": {
						"IRealitio": [
							59
						]
					},
					"id": 60,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "157:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "182:183:0",
								"text": "  @title IRealitio\n  @dev Required subset of https://github.com/realitio/realitio-contracts/blob/master/truffle/contracts/IRealitio.sol to implement a Realitio arbitrator."
							},
							"fullyImplemented": false,
							"id": 59,
							"linearizedBaseContracts": [
								59
							],
							"name": "IRealitio",
							"nameLocation": "376:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "392:470:0",
										"text": "@notice Notify the contract that the arbitrator has been paid for a question, freezing it pending their decision.\n @dev The arbitrator contract is trusted to only call this if they've been paid, and tell us who paid them.\n @param question_id The ID of the question\n @param requester The account that requested arbitration\n @param max_previous If specified, reverts if a bond higher than this was submitted after you sent your transaction."
									},
									"functionSelector": "f6a94ecb",
									"id": 12,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "notifyOfArbitrationRequest",
									"nameLocation": "876:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 10,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "question_id",
												"nameLocation": "920:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "912:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 4,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "912:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "requester",
												"nameLocation": "949:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "941:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "941:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "max_previous",
												"nameLocation": "976:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "968:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "968:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "902:92:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1003:0:0"
									},
									"scope": 59,
									"src": "867:137:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 13,
										"nodeType": "StructuredDocumentation",
										"src": "1010:611:0",
										"text": "@notice Submit the answer for a question, for use by the arbitrator.\n @dev Doesn't require (or allow) a bond. Required only in v2.0.\n If the current final answer is correct, the account should be whoever submitted it.\n If the current final answer is wrong, the account should be whoever paid for arbitration.\n However, the answerer stipulations are not enforced by the contract.\n @param question_id The ID of the question.\n @param answer The answer, encoded into bytes32.\n @param answerer The account credited with this answer for the purpose of bond claims."
									},
									"functionSelector": "fe92049d",
									"id": 22,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "submitAnswerByArbitrator",
									"nameLocation": "1635:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "question_id",
												"nameLocation": "1677:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1669:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 14,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1669:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "answer",
												"nameLocation": "1706:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1698:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 16,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1698:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "answerer",
												"nameLocation": "1730:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 22,
												"src": "1722:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 18,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1722:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1659:85:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1753:0:0"
									},
									"scope": 59,
									"src": "1626:128:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 23,
										"nodeType": "StructuredDocumentation",
										"src": "1760:292:0",
										"text": "@notice Returns the history hash of the question. Required before calling submitAnswerByArbitrator to make sure history is correct.\n @dev Required only in v2.0.\n @param question_id The ID of the question.\n @dev Updated on each answer, then rewound as each is claimed."
									},
									"functionSelector": "82ffa9f7",
									"id": 30,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getHistoryHash",
									"nameLocation": "2066:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "question_id",
												"nameLocation": "2089:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2081:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 24,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2081:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2080:21:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "2125:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 27,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2125:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2124:9:0"
									},
									"scope": 59,
									"src": "2057:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 31,
										"nodeType": "StructuredDocumentation",
										"src": "2140:425:0",
										"text": "@notice Returns the commitment info by its id. Required before calling submitAnswerByArbitrator to make sure history is correct.\n @dev Required only in v2.0.\n @param commitment_id The ID of the commitment.\n @return Time after which the committed answer can be revealed.\n @return Whether the commitment has already been revealed or not.\n @return The committed answer, encoded as bytes32."
									},
									"functionSelector": "839df945",
									"id": 42,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "commitments",
									"nameLocation": "2579:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "commitment_id",
												"nameLocation": "2599:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2591:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 32,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2591:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2590:23:0"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2674:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												},
												"typeName": {
													"id": 35,
													"name": "uint32",
													"nodeType": "ElementaryTypeName",
													"src": "2674:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint32",
														"typeString": "uint32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 38,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2694:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 37,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2694:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "2712:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 39,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2660:69:0"
									},
									"scope": 59,
									"src": "2570:160:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2736:718:0",
										"text": "@notice Submit the answer for a question, for use by the arbitrator, working out the appropriate winner based on the last answer details.\n @dev Doesn't require (or allow) a bond. Required only in v2.1.\n @param question_id The ID of the question\n @param answer The answer, encoded into bytes32\n @param payee_if_wrong The account to by credited as winner if the last answer given is wrong, usually the account that paid the arbitrator\n @param last_history_hash The history hash before the final one\n @param last_answer_or_commitment_id The last answer given, or the commitment ID if it was a commitment.\n @param last_answerer The address that supplied the last answer"
									},
									"functionSelector": "d44e293c",
									"id": 58,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "assignWinnerAndSubmitAnswerByArbitrator",
									"nameLocation": "3468:39:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "question_id",
												"nameLocation": "3525:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3517:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 44,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3517:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "answer",
												"nameLocation": "3554:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3546:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 46,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3546:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "payee_if_wrong",
												"nameLocation": "3578:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3570:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "last_history_hash",
												"nameLocation": "3610:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3602:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 50,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3602:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "last_answer_or_commitment_id",
												"nameLocation": "3645:28:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3637:36:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 52,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3637:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "last_answerer",
												"nameLocation": "3691:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3683:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3683:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3507:203:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3719:0:0"
									},
									"scope": 59,
									"src": "3459:261:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 60,
							"src": "366:3356:0",
							"usedErrors": []
						}
					],
					"src": "157:3566:0"
				},
				"id": 0
			}
		}
	}
}