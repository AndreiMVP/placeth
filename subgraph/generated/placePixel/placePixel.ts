// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class placePixel extends ethereum.SmartContract {
  static bind(address: Address): placePixel {
    return new placePixel("placePixel", address);
  }

  arbitrator(): Address {
    let result = super.call("arbitrator", "arbitrator():(address)", []);

    return result[0].toAddress();
  }

  try_arbitrator(): ethereum.CallResult<Address> {
    let result = super.tryCall("arbitrator", "arbitrator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  challengePeriod(): BigInt {
    let result = super.call(
      "challengePeriod",
      "challengePeriod():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_challengePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "challengePeriod",
      "challengePeriod():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  costPerPixel(): BigInt {
    let result = super.call("costPerPixel", "costPerPixel():(uint256)", []);

    return result[0].toBigInt();
  }

  try_costPerPixel(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("costPerPixel", "costPerPixel():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reality(): Address {
    let result = super.call("reality", "reality():(address)", []);

    return result[0].toAddress();
  }

  try_reality(): ethereum.CallResult<Address> {
    let result = super.tryCall("reality", "reality():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _costPerPixel(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangePixelsCall extends ethereum.Call {
  get inputs(): ChangePixelsCall__Inputs {
    return new ChangePixelsCall__Inputs(this);
  }

  get outputs(): ChangePixelsCall__Outputs {
    return new ChangePixelsCall__Outputs(this);
  }
}

export class ChangePixelsCall__Inputs {
  _call: ChangePixelsCall;

  constructor(call: ChangePixelsCall) {
    this._call = call;
  }

  get _pixels(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ChangePixelsCall__Outputs {
  _call: ChangePixelsCall;

  constructor(call: ChangePixelsCall) {
    this._call = call;
  }
}

export class LockCall extends ethereum.Call {
  get inputs(): LockCall__Inputs {
    return new LockCall__Inputs(this);
  }

  get outputs(): LockCall__Outputs {
    return new LockCall__Outputs(this);
  }
}

export class LockCall__Inputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get _x(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _y(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _xx(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _yy(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class LockCall__Outputs {
  _call: LockCall;

  constructor(call: LockCall) {
    this._call = call;
  }

  get qID(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}
